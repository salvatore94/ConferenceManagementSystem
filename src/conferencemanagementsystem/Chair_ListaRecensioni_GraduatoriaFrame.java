/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conferencemanagementsystem;

import static conferencemanagementsystem.MainClass.conferenza;
import static conferencemanagementsystem.MainClass.db;
import static conferencemanagementsystem.MainClass.scadutaSottomissioneRivisto;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author salvatore
 */
public class Chair_ListaRecensioni_GraduatoriaFrame extends javax.swing.JFrame {
    ArrayList<RecensioneClass> recensioni;
            
    /**
     * Creates new form Chair_ListaRecensioni_GraduatoriaFrame
     */
    public Chair_ListaRecensioni_GraduatoriaFrame() {
        initComponents();
        recensioni = preparaTabella();
        if (scadutaSottomissioneRivisto = false) {
            invia.setEnabled(false);
        }
    }

    
    private ArrayList<RecensioneClass>  preparaTabella() {
        Object [] colonne = {"#", "ID Articolo", "Votazione"};        
        Object [] row = new Object[3];
        
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(colonne);
        
       String sql = "SELECT * FROM recensioni";
       
       PreparedStatement stat;
       ArrayList<RecensioneClass> recensioni = new ArrayList<RecensioneClass>();
        try {
            stat = db.getDBConnection().prepareStatement(sql);
            
            ResultSet result = stat.executeQuery();

            while(result.next()){
                RecensioneClass recensione = new RecensioneClass();
                recensione.setIdRecensione(result.getInt("idRecensione"));
                recensione.setIdArticolo(result.getInt("idArticolo"));
                recensione.setIdRecensore(result.getInt("idRecensore"));
                recensione.setVotazione(result.getDouble("Votazione"));
                recensione.setCommento(result.getString("commento"));
                recensione.setCommentoRiservato(result.getString("commentoRiservato"));
                
                recensioni.add(recensione);

            }
        } catch (SQLException ex) {
            Logger.getLogger(Autore_SottomettiRivistoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for (int i=0, j=1; i < recensioni.size() && j < recensioni.size(); i++, j++) {
            if (recensioni.get(i).getIdArticolo() == recensioni.get(j).getIdArticolo()) {
                recensioni.get(i).setVotazione((recensioni.get(i).getVotazione() + recensioni.get(j).getVotazione()) / 2 );
                recensioni.remove(j);
            }
         }
        
        Collections.sort(recensioni, new Comparator<RecensioneClass>() {
           @Override
            public int compare(RecensioneClass recensione_1, RecensioneClass recensione_2) {
                return Double.compare(recensione_2.getVotazione(), recensione_1.getVotazione());
            }
        });
        
        for (int i=0; i<recensioni.size(); i++) {
            row[0] = i + 1;
            row[1] = recensioni.get(i).getIdArticolo();
            row[2] = recensioni.get(i).getVotazione();
             
            model.addRow(row);
        }
        
       table.setModel(model);

       return recensioni;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        invia = new javax.swing.JButton();
        stampaProceedings = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Graduatoria");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "#", "ID Articolo", "Votazione"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
        }

        invia.setText("Invia Risultati");
        invia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviaActionPerformed(evt);
            }
        });

        stampaProceedings.setText("Stampa Proceedings");
        stampaProceedings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stampaProceedingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(stampaProceedings)
                        .addGap(67, 67, 67)
                        .addComponent(invia, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stampaProceedings, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(invia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviaActionPerformed
      if (LocalDate.now().isAfter(conferenza.getScadenzaSottomissioneCorretti())) {
        
        int numeroArticoliAmmessi = conferenza.getNumeroArticoli();
        if (numeroArticoliAmmessi > recensioni.size()){
            //tutti gli articoli recensiti sono accettati
            for(int i=0; i<recensioni.size(); i++) {
                String sql = "UPDATE articoli SET ammesso=true WHERE idArticolo = ?";
                PreparedStatement stat;
                try {
                    stat = db.getDBConnection().prepareStatement(sql);
                    stat.setInt(1, recensioni.get(i).getIdArticolo());
                    
                    stat.executeUpdate();
                } catch (SQLException ex) {
                    Logger.getLogger(Chair_ListaRecensioniFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            for(int i=0; i<numeroArticoliAmmessi; i++) {
                String sql = "UPDATE articoli SET ammesso=true WHERE idArticolo = ?";
                PreparedStatement stat;
                try {
                    stat = db.getDBConnection().prepareStatement(sql);
                    stat.setInt(1, recensioni.get(i).getIdArticolo());
                    
                    stat.executeUpdate();
                } catch (SQLException ex) {
                    Logger.getLogger(Chair_ListaRecensioniFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        
        //A questo punto si inviano le email agli autori
        String sql = "SELECT * FROM articoli WHERE ammesso=true";
        PreparedStatement stat;
        ArrayList<UtenteClass> autoriAmmessi = new ArrayList<UtenteClass>();
        ArrayList<ArticoloClass> articoliAmmessi = new ArrayList<ArticoloClass>();
        
          try {
              stat = db.getDBConnection().prepareStatement(sql);
              ResultSet result = stat.executeQuery();
              
              while (result.next()){
                  UtenteClass autore = new UtenteClass();
                  autore.setId(result.getInt("idUtente"));
                  
                  autoriAmmessi.add(autore);
                  
                  ArticoloClass articolo = new ArticoloClass();
                  articolo.setIdArticolo(result.getInt("idArticolo"));
                  articolo.setIdAutore(result.getInt("idAutore"));
                  articolo.setTitolo(result.getString("titolo"));
                  articolo.setTema("tema");
                  
                  articoliAmmessi.add(articolo);
                  
              }
          } catch (SQLException ex) {
              Logger.getLogger(Chair_ListaRecensioni_GraduatoriaFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
        
        for (int i=0; i<autoriAmmessi.size(); i++) {
            sql = "SELECT * FROM utenti WHERE idUtente=?";
            try {
                stat = db.getDBConnection().prepareStatement(sql);
                stat.setInt(1, autoriAmmessi.get(i).getId());
                
                ResultSet result = stat.executeQuery();
                
                while(result.next()) {
                    autoriAmmessi.get(i).setNome("nome");
                    autoriAmmessi.get(i).setCognome("cognome");
                    autoriAmmessi.get(i).setEmail("email");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Chair_ListaRecensioni_GraduatoriaFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        String mittente = "";
        String oggetto = "Articolo ammesso alla conferenza";
        String corpo = "Titolo articolo: ";
        
        for (int i=0; i<autoriAmmessi.size(); i++) {
            String destinatario = autoriAmmessi.get(i).getEmail();
            corpo = corpo + " " + articoliAmmessi.get(i).getTitolo();
            
            EmailClass email = new EmailClass(mittente, destinatario, oggetto, corpo);
            //email.inviaEmail();
        }
        
        creaJDialog("Successo", "Esiti registrati");
        
      } else {
          creaJDialog("Errore", "Scadenza non ancora raggiunta");
      }
    }//GEN-LAST:event_inviaActionPerformed

    private void stampaProceedingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stampaProceedingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stampaProceedingsActionPerformed

        private void creaJDialog(String title, String mess) {
        JDialog err = new JDialog(this, title, true);
          err.add(new JLabel(mess));
          
          err.setSize(250, 150);
          err.setVisible(true);
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chair_ListaRecensioni_GraduatoriaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chair_ListaRecensioni_GraduatoriaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chair_ListaRecensioni_GraduatoriaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chair_ListaRecensioni_GraduatoriaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chair_ListaRecensioni_GraduatoriaFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton invia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton stampaProceedings;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
