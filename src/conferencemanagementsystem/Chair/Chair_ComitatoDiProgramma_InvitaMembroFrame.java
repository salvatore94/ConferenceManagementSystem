/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conferencemanagementsystem.Chair;

import conferencemanagementsystem.Autore.Autore_SottomettiRivistoFrame;
import conferencemanagementsystem.Utils.EmailClass;
import conferencemanagementsystem.UtenteClass;
import static conferencemanagementsystem.MainClass.conferenza;
import static conferencemanagementsystem.MainClass.db;
import static conferencemanagementsystem.MainClass.utente;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author salvatore
 */
public class Chair_ComitatoDiProgramma_InvitaMembroFrame extends javax.swing.JFrame {

    /**
     * Creates new form Chair_ComitatoDiProgramma_InvitaMembro
     */
    public Chair_ComitatoDiProgramma_InvitaMembroFrame() {
        initComponents();
        preparaTabella();
    }
     private void preparaTabella() {
        Object [] colonne = { "Nome", "Cognome", "Email"};        
        Object [] row = new Object[3];
        
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(colonne);
        
       String sql = "SELECT * FROM utenti";
       
       PreparedStatement stat;
       ArrayList<UtenteClass> utenti = new ArrayList<UtenteClass>();
        try {
            stat = db.getDBConnection().prepareStatement(sql);
            
            ResultSet result = stat.executeQuery();

            while(result.next()){
                UtenteClass ut = new UtenteClass();
                ut.setId(result.getInt("idUtente"));
                ut.setNome(result.getString("nome"));
                ut.setCognome(result.getString("cognome"));
                ut.setEmail(result.getString("email"));
                
                utenti.add(ut);

            }
        } catch (SQLException ex) {
            Logger.getLogger(Autore_SottomettiRivistoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for (int i=0; i < utenti.size(); i++) {
            if (utenti.get(i).getId() != conferenza.getIdChair()) {
                row[0] = utenti.get(i).getNome();
                row[1] = utenti.get(i).getCognome();
                row[2] = utenti.get(i).getEmail();
            
                model.addRow(row);
            }
         }
        
       table.setModel(model);

    }   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        aggiungi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Cognome", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
        }

        aggiungi.setText("Aggiungi");
        aggiungi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggiungiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aggiungi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aggiungi, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aggiungiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiungiActionPerformed
    int row = table.getSelectedRow();
       if (row != -1) {
           String email = (String) table.getValueAt(row, 2);
           String sql = "SELECT * FROM utenti WHERE email = ?";
           PreparedStatement stat;
           try {
               stat = db.getDBConnection().prepareStatement(sql);
               stat.setString(1, email);
               
               ResultSet result = stat.executeQuery();
               
               while (result.next()) {
                   int idRecensore = result.getInt("idUtente");
                   
                   sql = "INSERT INTO comitato (idUtente) VALUES (?)";
                   
                   PreparedStatement stat_del = db.getDBConnection().prepareStatement(sql);
                   stat_del.setInt(1, idRecensore);
                   stat_del.executeUpdate();
               }
           } catch (SQLException ex) {
               Logger.getLogger(Chair_ComitatoDiProgrammaFrame.class.getName()).log(Level.SEVERE, null, ex);
           }
           
           
           //Invio una email di conferma
               //Manda email
               String oggetto = "Conferenza " + conferenza.getNome();
               String  corpo = "Invito a far parte del Comitato di Programma";
               EmailClass email1 = new EmailClass(utente.getEmail(), email, oggetto, corpo);
               try {
                    email1.inviaEmail();
               } catch (MessagingException ex) {
                    Logger.getLogger(Chair_ComitatoDiProgramma_InvitaMembroFrame.class.getName()).log(Level.SEVERE, null, ex);
              }
               
           creaJDialog("Successo", "Utente inserito nel Comitato di Programma");
           this.dispose();
           
           Chair_ComitatoDiProgrammaFrame comitatoF = new Chair_ComitatoDiProgrammaFrame();
           comitatoF.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
           comitatoF.setVisible(true);

       } else {
           creaJDialog("Errore", "Seleziona la riga corrispondente all'utente");
       }
    }//GEN-LAST:event_aggiungiActionPerformed

    private void creaJDialog(String title, String mess) {
        JDialog err = new JDialog(this, title, true);
          err.add(new JLabel(mess));
          
          err.setSize(250, 150);
          err.setVisible(true);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chair_ComitatoDiProgramma_InvitaMembroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chair_ComitatoDiProgramma_InvitaMembroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chair_ComitatoDiProgramma_InvitaMembroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chair_ComitatoDiProgramma_InvitaMembroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chair_ComitatoDiProgramma_InvitaMembroFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aggiungi;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
